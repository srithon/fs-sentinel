#+title: fs-sentinel

~fs-sentinel~ is a cross-platform service that actively observes file systems for modifications, allowing clients to easily check if a given file system has changed, and reset the "changed" status when they choose.

* Motivation
When maintaining incremental file system snapshots on a system with pruning to limit the number of retained snapshots, *duplicate snapshots* should be avoided at all costs.
Take the following scenario:
- In our pruning configuration, we specify that we want to keep 5 hourly snapshots for a given file system (note that this is a platform/implementation-specific term)
- We take an hourly snapshot and reach our hourly snapshot capacity; if we were to take a new snapshot, it would replace our oldest hourly snapshot.
- However, for the next 5 hours, our file system does not change at all
- If our automated snapshotting continued over this period, we would end up with *5 equivalent snapshots*, which are useless compared to the 5 unique snapshots from the hours prior

To prevent this scenario, we need a way to efficiently determine if a snapshot should be taken for any given file system, which our snapshotting service could hook into to guard against duplicate snapshots.
This is where ~fs-sentinel~ comes in!
* Introduction
~fs-sentinel~ is a service which actively monitors file systems* for changes, keeping track of which ones were modified since the last ~mark~ operation and allowing other programs to easily ~check~ if a file system has changed.
File system* in this context is an abstract term, determined by the underlying ~Platform~ implementation.
The stock Linux implementation uses the Linux definition for "file systems", which typically consists of individual disk partitions and volume manager subvolumes.
This implementation uses the ~fanotify~ API, specifically the ~fsnotifywait~ command-line program, to efficiently monitor file systems for changes.

The project consists of a library and CLI component.
The library exposes the daemon implementation and a Rust trait which abstracts all platform-specific behavior, allowing you to use the daemon logic for non-Linux platforms, as well as applying it to "file system" definitions which differ from the stock implementation.
For example, an implementor could trivially treat directories within one physical file system as separate file systems, so long as they specify how to monitor those directories.
* Provided Setups
** ZFS+Linux Integration
~fs-sentinel~ comes with short example code for monitoring mounted ZFS datasets on system startup, as well as example implementations for hooks to be used with the amazing [[https://github.com/jimsalterjrs/sanoid/][sanoid]] project, which was my primary usecase going into development.
To use the project with ~sanoid~ simply point the ~pre_snapshot_script~ and ~post_snapshot_script~ to the corresponding scripts from ~./zfs-linux~.
To use this setup, consider running ~make zfs-install~, which will place the relevant scripts and binaries in ~/usr/local/bin~ by default, as well as install a Systemd service for launching the daemon.
After that, modify your ~sanoid.conf~ and you should be good to go!
